import os
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db import add_user, get_all_users_ids, count_users

router = Router()

ADMIN_ID = os.getenv("ADMIN_ID")  # –º–æ–∂–Ω–æ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å


# ---------- –ú–µ–Ω—é (inline) ----------
def main_menu_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="menu:info")
    kb.button(text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/your_username")  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π @username
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")
    kb.adjust(2, 1)
    return kb


@router.message(CommandStart())
async def cmd_start(m: Message):
    add_user(m.from_user.id, m.from_user.username)
    await m.answer(
        "–Ø –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render ‚úÖ\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help, /ping, /menu, /counter, /users, /broadcast, /feedback",
    )


@router.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
        "‚Ä¢ /menu ‚Äî –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
        "‚Ä¢ /counter ‚Äî —Å—á—ë—Ç—á–∏–∫ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏\n"
        "‚Ä¢ /users ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "‚Ä¢ /broadcast <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "‚Ä¢ /feedback <—Ç–µ–∫—Å—Ç> ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É"
    )


@router.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong üèì")


@router.message(Command("menu"))
async def show_menu(m: Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb().as_markup())


@router.callback_query(F.data == "menu:info")
async def menu_info(cq: CallbackQuery):
    await cq.answer()
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:back")
    await cq.message.edit_text(
        "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.\n–ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.",
        reply_markup=kb.as_markup(),
    )


@router.callback_query(F.data == "menu:back")
async def menu_back(cq: CallbackQuery):
    await cq.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
    await cq.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb().as_markup())


# ---------- –°—á—ë—Ç—á–∏–∫ ----------
def counter_kb(value: int) -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûñ", callback_data=f"cnt:-1:{value}")
    kb.button(text="‚ûï", callback_data=f"cnt:+1:{value}")
    kb.button(text="üîÑ –°–±—Ä–æ—Å", callback_data="cnt:reset:0")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cnt:back:0")
    kb.adjust(2, 2)
    return kb


@router.message(Command("counter"))
async def start_counter(m: Message):
    start = 0
    await m.answer(f"–°—á—ë—Ç—á–∏–∫: {start}", reply_markup=counter_kb(start).as_markup())


@router.callback_query(F.data.startswith("cnt:"))
async def on_counter(cq: CallbackQuery):
    try:
        _, action, raw = cq.data.split(":")
        value = int(raw)
    except Exception:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    if action == "+1":
        value += 1
        await cq.answer("–ü–ª—é—Å –æ–¥–∏–Ω ‚úÖ")
    elif action == "-1":
        value -= 1
        await cq.answer("–ú–∏–Ω—É—Å –æ–¥–∏–Ω ‚úÖ")
    elif action == "reset":
        value = 0
        await cq.answer("–°–±—Ä–æ—à–µ–Ω–æ")
    elif action == "back":
        await cq.answer()
        await cq.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb().as_markup())
        return

    await cq.message.edit_text(f"–°—á—ë—Ç—á–∏–∫: {value}", reply_markup=counter_kb(value).as_markup())


# ---------- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ----------
def is_admin(user_id: int) -> bool:
    if not ADMIN_ID:
        return False
    try:
        return int(ADMIN_ID) == int(user_id)
    except Exception:
        return False


@router.message(Command("users"))
async def cmd_users(m: Message):
    if not is_admin(m.from_user.id):
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    await m.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {count_users()}")


@router.message(Command("broadcast"))
async def cmd_broadcast(m: Message):
    if not is_admin(m.from_user.id):
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return

    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast —Ç–µ–∫—Å—Ç")
        return

    text = parts[1]
    user_ids = get_all_users_ids()
    ok, fail = 0, 0
    for uid in user_ids:
        try:
            await m.bot.send_message(uid, text)
            ok += 1
        except Exception:
            fail += 1
    await m.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—Ö: {ok}, –æ—à–∏–±–æ–∫: {fail}.")


@router.message(Command("feedback"))
async def cmd_feedback(m: Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–ù–∞–ø–∏—à–∏: /feedback —Ç–≤–æ–π —Ç–µ–∫—Å—Ç")
        return

    admin = ADMIN_ID
    if not admin:
        await m.answer("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    txt = parts[1]
    u = m.from_user
    prefix = f"Feedback –æ—Ç @{u.username or 'no_username'} (id={u.id}):\n"
    try:
        await m.bot.send_message(int(admin), prefix + txt)
        await m.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
    except Exception:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É üòï")
