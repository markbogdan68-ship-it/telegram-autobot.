import os
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db import init_db, add_user, count_users, get_sample_users, all_user_ids
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID
    import os
import asyncio
import threading
import time
import logging
from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ---------- –õ–û–ì–ò ----------
LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
_level = {
    "CRITICAL": logging.CRITICAL,
    "ERROR": logging.ERROR,
    "WARNING": logging.WARNING,
    "INFO": logging.INFO,
    "DEBUG": logging.DEBUG,
}.get(LEVEL, logging.INFO)

logging.basicConfig(
    level=_level,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")
START_TS = time.time()

# ---------- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ----------
router = Router()
USERS: set[int] = set()  # —Å–æ–±–∏—Ä–∞–µ–º user_id —Ç–µ—Ö, –∫—Ç–æ –Ω–∞–ø–∏—Å–∞–ª /start (–≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞)

# ---------- –ö–ù–û–ü–ö–ò ----------
def main_menu_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="menu:info")
    kb.button(text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="menu:contact")
    kb.button(text="üßÆ –°—á—ë—Ç—á–∏–∫", callback_data="menu:counter")
    kb.adjust(2, 1)
    return kb

def counter_kb(value: int) -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûñ", callback_data=f"cnt:-1:{value}")
    kb.button(text="‚ûï", callback_data=f"cnt:+1:{value}")
    kb.button(text="üîÑ –°–±—Ä–æ—Å", callback_data="cnt:reset:0")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cnt:back:0")
    kb.adjust(2, 2)
    return kb

# ---------- –ö–û–ú–ê–ù–î–´ ----------
@router.message(CommandStart())
async def cmd_start(m: Message):
    USERS.add(m.from_user.id)
    await m.answer(
        "–Ø –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render ‚úÖ\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help, /ping, /menu, /feedback",
        reply_markup=main_menu_kb().as_markup()
    )

@router.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
        "‚Ä¢ /menu ‚Äî –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
        "‚Ä¢ /feedback <—Ç–µ–∫—Å—Ç> ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É\n"
        "‚Ä¢ /broadcast <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "‚Ä¢ /users ‚Äî —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"
    )

@router.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong üèì")

@router.message(Command("menu"))
async def cmd_menu(m: Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb().as_markup())

# ---------- CALLBACKS –ú–ï–ù–Æ ----------
@router.callback_query(F.data == "menu:info")
async def menu_info(cq: CallbackQuery):
    await cq.answer()
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:back")
    kb.adjust(1)
    up = int(time.time() - START_TS)
    await cq.message.edit_text(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚Ä¢ –ê–ø—Ç–∞–π–º –ø—Ä–æ—Ü–µ—Å—Å–∞: ~{up} —Å–µ–∫.",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "menu:contact")
async def menu_contact(cq: CallbackQuery):
    await cq.answer("–ü–∏—à–∏ –∫–æ–º–∞–Ω–¥–æ–π /feedback <—Ç–≤–æ–π —Ç–µ–∫—Å—Ç>")
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:back")
    kb.adjust(1)
    await cq.message.edit_text(
        "–ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É: /feedback –ü—Ä–∏–≤–µ—Ç! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å...",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "menu:counter")
async def menu_counter(cq: CallbackQuery):
    await cq.answer()
    await cq.message.edit_text(
        "–°—á—ë—Ç—á–∏–∫: 0",
        reply_markup=counter_kb(0).as_markup()
    )

@router.callback_query(F.data == "menu:back")
async def menu_back(cq: CallbackQuery):
    await cq.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
    await cq.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_kb().as_markup()
    )

# ---------- –°–ß–Å–¢–ß–ò–ö ----------
@router.callback_query(F.data.startswith("cnt:"))
async def on_counter(cq: CallbackQuery):
    try:
        _, action, raw = cq.data.split(":")
        value = int(raw)
    except Exception:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    if action == "+1":
        value += 1
        await cq.answer("–ü–ª—é—Å –æ–¥–∏–Ω ‚úÖ")
    elif action == "-1":
        value -= 1
        await cq.answer("–ú–∏–Ω—É—Å –æ–¥–∏–Ω ‚úÖ")
    elif action == "reset":
        value = 0
        await cq.answer("–°–±—Ä–æ—à–µ–Ω–æ")
    elif action == "back":
        await cq.answer()
        await cq.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_kb().as_markup()
        )
        return

    await cq.message.edit_text(
        f"–°—á—ë—Ç—á–∏–∫: {value}",
        reply_markup=counter_kb(value).as_markup()
    )

# ---------- –ê–î–ú–ò–ù/–†–ê–°–°–´–õ–ö–ê ----------
def is_admin(user_id: int) -> bool:
    try:
        admin_id = int(os.getenv("ADMIN_ID", "0"))
    except Exception:
        admin_id = 0
    return admin_id and user_id == admin_id

@router.message(Command("users"))
async def cmd_users(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")

    total = count_users()
    if total == 0:
        return await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    sample = get_sample_users(10)
    preview = ", ".join(map(str, sample))
    more = f"\n‚Ä¶–∏ –µ—â—ë {total-10}" if total > 10 else ""
    await m.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n{preview}{more}")
@router.message(Command("broadcast")))
async def cmd_broadcast(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")

    parts = m.text.split(" ", 1)
    if len(parts) < 2 or not parts[1].strip():
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –¢–ï–ö–°–¢_–°–û–û–ë–©–ï–ù–ò–Ø")

    text = parts[1].strip()
    ok, fail = 0, 0

    for uid in all_user_ids():
        try:
            await m.bot.send_message(uid, text)
            ok += 1
        except Exception:
            fail += 1

    await m.answer(f"–ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {ok}. –û—à–∏–±–æ–∫: {fail}.")
# ---------- –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ ----------
@router.message(Command("feedback"))
async def cmd_feedback(m: Message):
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–ù–∞–ø–∏—à–∏: /feedback —Ç–≤–æ–π —Ç–µ–∫—Å—Ç")
        return
    admin_raw = os.getenv("ADMIN_ID")
    if not admin_raw:
        await m.answer("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return
    try:
        admin_id = int(admin_raw)
    except Exception:
        await m.answer("ADMIN_ID –∑–∞–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return

    txt = parts[1]
    me = m.from_user
    header = f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{me.username or 'user'} (id {me.id}):"
    try:
        await m.bot.send_message(admin_id, f"{header}\n\n{txt}")
        await m.answer("–û—Ç–ø—Ä–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        log.error("feedback send failed: %s", e)
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# ---------- HTTP-–°–ï–†–í–ï–† –î–õ–Ø RENDER ----------
def start_http_server():
    port = int(os.environ.get("PORT", 8080))
    with TCPServer(("", port), SimpleHTTPRequestHandler) as httpd:
        log.info("HTTP server on :%s", port)
        httpd.serve_forever()

# ---------- –ó–ê–ü–£–°–ö ----------
async def run_bot():
    # ... —É —Ç–µ–±—è —Ç—É—Ç load_dotenv(), token –∏ —Ç.–¥.
    init_db()  # <-- –î–û dp.start_polling(...)
    # dp = Dispatcher(), include_router(...), –∏ —Ç.–ø.
    await dp.start_polling(bot)
    async def run_bot():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise RuntimeError("TELEGRAM_TOKEN is not set")
    bot = Bot(token)
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    threading.Thread(target=start_http_server, daemon=True).start()
    asyncio.run(run_bot())
