# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π Telegram-–±–æ—Ç (aiogram v3) –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ:
- /start /help /ping /menu /counter
- –ë–∞–∑–∞ SQLite (SQLAlchemy 2.x): —Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã: /users /broadcast <—Ç–µ–∫—Å—Ç> /feedback <—Ç–µ–∫—Å—Ç>
- Inline-–∫–Ω–æ–ø–∫–∏, —Å—á—ë—Ç—á–∏–∫, –º–µ–Ω—é
- –§–æ–Ω–æ–≤—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç–∞–Ω—Å –∞–∫—Ç–∏–≤–Ω—ã–º)
–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TELEGRAM_TOKEN ‚Äì —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  ADMIN_ID       ‚Äì Telegram ID –∞–¥–º–∏–Ω–∞ (—á–∏—Å–ª–æ, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  LOG_LEVEL      ‚Äì —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ (INFO/DEBUG/‚Ä¶)
"""
from __future__ import annotations

import os
import asyncio
import threading
import logging
import time
from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
from typing import Optional, List

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ===== SQLAlchemy (–≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ) =====
from sqlalchemy import create_engine, Integer, String, select
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, sessionmaker


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "users"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    tg_id: Mapped[int] = mapped_column(Integer, unique=True, index=True)
    username: Mapped[str] = mapped_column(String, default="")


DB_URL = "sqlite:///./db.sqlite3"
engine = create_engine(DB_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)


def init_db() -> None:
    Base.metadata.create_all(bind=engine)


def add_user(tg_id: int, username: Optional[str]) -> None:
    with SessionLocal() as s:
        u = s.execute(select(User).where(User.tg_id == tg_id)).scalar_one_or_none()
        if not u:
            s.add(User(tg_id=tg_id, username=(username or "")[:100]))
            s.commit()


def count_users() -> int:
    with SessionLocal() as s:
        return s.query(User).count()


def get_all_users_ids() -> List[int]:
    with SessionLocal() as s:
        rows = s.query(User.tg_id).all()
        return [r[0] for r in rows]


# ===== –õ–æ–≥–∏ =====
LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LEVEL, logging.INFO),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")


# ===== Inline-–º–µ–Ω—é –∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã =====
router = Router()
ADMIN_ID = os.getenv("ADMIN_ID")  # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ


def is_admin(user_id: int) -> bool:
    if not ADMIN_ID:
        return False
    try:
        return int(ADMIN_ID) == int(user_id)
    except Exception:
        return False


def main_menu_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="menu:info")
    kb.button(text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/your_username")  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π @username
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")
    kb.adjust(2, 1)
    return kb


@router.message(CommandStart())
async def on_start(m: Message):
    add_user(m.from_user.id, m.from_user.username)
    await m.answer(
        "–Ø –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render ‚úÖ\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help, /ping, /menu, /counter, /users, /broadcast, /feedback"
    )


@router.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
        "‚Ä¢ /menu ‚Äî –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
        "‚Ä¢ /counter ‚Äî —Å—á—ë—Ç—á–∏–∫\n"
        "‚Ä¢ /users ‚Äî —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)\n"
        "‚Ä¢ /broadcast <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ (–∞–¥–º–∏–Ω)\n"
        "‚Ä¢ /feedback <—Ç–µ–∫—Å—Ç> ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É"
    )


@router.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong üèì")


@router.message(Command("menu"))
async def cmd_menu(m: Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb().as_markup())


@router.callback_query(F.data == "menu:info")
async def cb_menu_info(cq: CallbackQuery):
    await cq.answer()
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:back")
    await cq.message.edit_text(
        "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.\n–ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.",
        reply_markup=kb.as_markup(),
    )


@router.callback_query(F.data == "menu:back")
async def cb_menu_back(cq: CallbackQuery):
    await cq.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
    await cq.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb().as_markup())


# ----- –°—á—ë—Ç—á–∏–∫ -----
def counter_kb(value: int) -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûñ", callback_data=f"cnt:-1:{value}")
    kb.button(text="‚ûï", callback_data=f"cnt:+1:{value}")
    kb.button(text="üîÑ –°–±—Ä–æ—Å", callback_data=f"cnt:reset:0")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cnt:back:0")
    kb.adjust(2, 2)
    return kb


@router.message(Command("counter"))
async def cmd_counter(m: Message):
    start = 0
    await m.answer(f"–°—á—ë—Ç—á–∏–∫: {start}", reply_markup=counter_kb(start).as_markup())


@router.callback_query(F.data.startswith("cnt:"))
async def cb_counter(cq: CallbackQuery):
    try:
        _, action, raw = cq.data.split(":")
        value = int(raw)
    except Exception:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    if action == "+1":
        value += 1
        await cq.answer("–ü–ª—é—Å –æ–¥–∏–Ω ‚úÖ")
    elif action == "-1":
        value -= 1
        await cq.answer("–ú–∏–Ω—É—Å –æ–¥–∏–Ω ‚úÖ")
    elif action == "reset":
        value = 0
        await cq.answer("–°–±—Ä–æ—à–µ–Ω–æ")
    elif action == "back":
        await cq.answer()
        await cq.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb().as_markup())
        return

    await cq.message.edit_text(f"–°—á—ë—Ç—á–∏–∫: {value}", reply_markup=counter_kb(value).as_markup())


# ----- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã -----
@router.message(Command("users"))
async def cmd_users(m: Message):
    if not is_admin(m.from_user.id):
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    await m.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {count_users()}")


@router.message(Command("broadcast"))
async def cmd_broadcast(m: Message):
    if not is_admin(m.from_user.id):
        await m.answer("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return

    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast —Ç–µ–∫—Å—Ç")
        return

    text = parts[1]
    user_ids = get_all_users_ids()
    ok, fail = 0, 0
    for uid in user_ids:
        try:
            await m.bot.send_message(uid, text)
            ok += 1
        except Exception:
            fail += 1
            await asyncio.sleep(0)  # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ü–∏–∫–ª
    await m.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—Ö: {ok}, –æ—à–∏–±–æ–∫: {fail}.")


@router.message(Command("feedback"))
async def cmd_feedback(m: Message):
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–ù–∞–ø–∏—à–∏: /feedback —Ç–≤–æ–π —Ç–µ–∫—Å—Ç")
        return

    if not ADMIN_ID:
        await m.answer("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    u = m.from_user
    prefix = f"Feedback –æ—Ç @{u.username or 'no_username'} (id={u.id}):\n"
    try:
        await m.bot.send_message(int(ADMIN_ID), prefix + parts[1])
        await m.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
    except Exception:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É üòï")


# ===== HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (keep-alive) =====
def start_http_server():
    port = int(os.environ.get("PORT", 8080))

    class Handler(SimpleHTTPRequestHandler):
        def log_message(self, *args, **kwargs):
            pass  # —Ç–∏—à–µ –≤ –ª–æ–≥–∞—Ö

    with TCPServer(("", port), Handler) as httpd:
        log.info(f"HTTP server on 0.0.0.0:{port}")
        httpd.serve_forever()


# ===== –ó–∞–ø—É—Å–∫ =====
async def run_bot():
    load_dotenv()
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise RuntimeError("TELEGRAM_TOKEN is not set")

    init_db()

    dp = Dispatcher()
    dp.include_router(router)
    bot = Bot(token)

    log.info("Start polling...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    # HTTP –≤ —Ñ–æ–Ω–µ (–¥–ª—è Render Free)
    threading.Thread(target=start_http_server, daemon=True).start()
    asyncio.run(run_bot())
