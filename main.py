# === imports (–¥–æ–±–∞–≤—å, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç) ===
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –µ—Å–ª–∏ —É —Ç–µ–±—è –†–ê–ù–ï–ï –Ω–µ –±—ã–ª–æ router ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É:
router = Router()


# =========================
# 1) –ú–µ–Ω—é —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
# =========================

def main_menu_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="menu:info")
    kb.button(text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/your_username")  # <-- –ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ–π @username
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")
    kb.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, 1 –≤–æ –≤—Ç–æ—Ä–æ–º
    return kb

@router.message(Command("menu"))
async def show_menu(m: Message):
    await m.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_kb().as_markup()
    )

@router.callback_query(F.data == "menu:info")
async def menu_info(cq: CallbackQuery):
    await cq.answer()  # –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:back")
    await cq.message.edit_text(
        "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.\n–ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "menu:back")
async def menu_back(cq: CallbackQuery):
    await cq.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
    await cq.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_kb().as_markup()
    )


# ==========================================
# 2) –ü—Ä–∏–º–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ callback-–æ—Ç–≤–µ—Ç–∞–º–∏
#    (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—á—ë—Ç—á–∏–∫: +1 / -1 / –°–±—Ä–æ—Å)
# ==========================================

def counter_kb(value: int) -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûñ", callback_data=f"cnt:-1:{value}")
    kb.button(text="‚ûï", callback_data=f"cnt:+1:{value}")
    kb.button(text="üîÑ –°–±—Ä–æ—Å", callback_data="cnt:reset:0")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cnt:back:0")
    kb.adjust(2, 2)
    return kb

@router.message(Command("counter"))
async def start_counter(m: Message):
    start = 0
    await m.answer(
        f"–°—á—ë—Ç—á–∏–∫: {start}",
        reply_markup=counter_kb(start).as_markup()
    )

@router.callback_query(F.data.startswith("cnt:"))
async def on_counter(cq: CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç—ã:
    # "cnt:-1:5"  -> –¥–µ–π—Å—Ç–≤–∏–µ, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    # "cnt:+1:5"
    # "cnt:reset:0"
    # "cnt:back:0"
    try:
        _, action, raw = cq.data.split(":")
        value = int(raw)
    except Exception:
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    if action == "+1":
        value += 1
        await cq.answer("–ü–ª—é—Å –æ–¥–∏–Ω ‚úÖ")
        await cq.message.edit_text(
            f"–°—á—ë—Ç—á–∏–∫: {value}",
            reply_markup=counter_kb(value).as_markup()
        )
    elif action == "-1":
        value -= 1
        await cq.answer("–ú–∏–Ω—É—Å –æ–¥–∏–Ω ‚úÖ")
        await cq.message.edit_text(
            f"–°—á—ë—Ç—á–∏–∫: {value}",
            reply_markup=counter_kb(value).as_markup()
        )
    elif action == "reset":
        value = 0
        await cq.answer("–°–±—Ä–æ—à–µ–Ω–æ")
        await cq.message.edit_text(
            f"–°—á—ë—Ç—á–∏–∫: {value}",
            reply_markup=counter_kb(value).as_markup()
        )
    elif action == "back":
        # –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Å—á—ë—Ç—á–∏–∫–∞
        await cq.answer()
        await cq.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_kb().as_markup()
        )
