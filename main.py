# main.py
import os
import asyncio
import threading
import time
import logging
from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder


# ---------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ----------
LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
_level = {
    "CRITICAL": logging.CRITICAL,
    "ERROR": logging.ERROR,
    "WARNING": logging.WARNING,
    "INFO": logging.INFO,
    "DEBUG": logging.DEBUG,
}.get(LEVEL, logging.INFO)

logging.basicConfig(
    level=_level,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")
START_TS = time.time()


# ---------- HTTP –¥–ª—è Render ----------
def start_http_server():
    port = int(os.environ.get("PORT", 8080))
    handler = SimpleHTTPRequestHandler
    with TCPServer(("", port), handler) as httpd:
        log.info("HTTP server started on port %s", port)
        httpd.serve_forever()


# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def menu_kb(count: int = 0):
    """
    –°—Ç—Ä–æ–∏–º inline-–º–µ–Ω—é.
    1) –°—á—ë—Ç—á–∏–∫ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∞–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    2) –ü–æ–º–æ—â—å ‚Äî –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
    3) URL-–∫–Ω–æ–ø–∫–∞ (–ø—Ä–∏–º–µ—Ä)
    """
    kb = InlineKeyboardBuilder()
    kb.button(text=f"‚ûï –°—á—ë—Ç—á–∏–∫: {count}", callback_data=f"cnt:{count}")
    kb.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    kb.button(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url="https://example.com")
    # –í –ø–µ—Ä–≤–æ–º —Ä—è–¥—É ‚Äî —Å—á—ë—Ç—á–∏–∫, –≤–æ –≤—Ç–æ—Ä–æ–º ‚Äî –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    kb.adjust(1, 2)
    return kb.as_markup()


# ---------- –ë–û–¢ ----------
async def run_bot():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise RuntimeError("TELEGRAM_TOKEN is not set")

    bot = Bot(token)
    dp = Dispatcher()

    # /start
    @dp.message(CommandStart())
    async def on_start(m: Message):
        uptime = int(time.time() - START_TS)
        await m.answer(
            f"–Ø –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render ‚úÖ\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help, /ping, /menu\n"
            f"Uptime: {uptime}s",
            reply_markup=menu_kb(0),
        )

    # /help
    @dp.message(Command("help"))
    async def help_cmd(m: Message):
        await m.answer(
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
            "‚Ä¢ /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
            "‚Ä¢ /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )

    # /ping
    @dp.message(Command("ping"))
    async def ping_cmd(m: Message):
        await m.answer("pong üèì")

    # /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    @dp.message(Command("menu"))
    async def menu_cmd(m: Message):
        await m.answer("–ú–µ–Ω—é:", reply_markup=menu_kb(0))

    # callback: —Å—á—ë—Ç—á–∏–∫
    @dp.callback_query(F.data.startswith("cnt:"))
    async def on_counter(cb: CallbackQuery):
        try:
            _, raw = cb.data.split(":")
            n = int(raw) + 1
        except Exception:
            n = 1
        await cb.message.edit_text(
            f"–¢—ã –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É {n} —Ä–∞–∑(–∞).",
            reply_markup=menu_kb(n),
        )
        await cb.answer("–û–±–Ω–æ–≤–∏–ª —Å—á—ë—Ç—á–∏–∫ ‚úîÔ∏è")

    # callback: –ø–æ–º–æ—â—å
    @dp.callback_query(F.data == "help")
    async def on_help(cb: CallbackQuery):
        await cb.answer()  # —Å–∫—Ä—ã—Ç—å ‚Äú—á–∞—Å–∏–∫–∏‚Äù
        await cb.message.answer(
            "–≠—Ç–æ inline-–º–µ–Ω—é:\n"
            "‚Ä¢ ¬´–°—á—ë—Ç—á–∏–∫¬ª –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ\n"
            "‚Ä¢ ¬´–ü–æ–º–æ—â—å¬ª –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É\n"
            "‚Ä¢ ¬´–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç¬ª ‚Äî URL-–∫–Ω–æ–ø–∫–∞"
        )

    log.info("Run polling for bot")
    await dp.start_polling(bot)


if __name__ == "__main__":
    # –ø–æ–¥–Ω–∏–º–µ–º HTTP –Ω–∞ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã Render —Å—á–∏—Ç–∞–ª —Å–µ—Ä–≤–∏—Å –∂–∏–≤—ã–º
    threading.Thread(target=start_http_server, daemon=True).start()
    asyncio.run(run_bot())
